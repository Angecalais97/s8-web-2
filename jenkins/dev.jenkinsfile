pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    options {
        timeout(time: 10, unit: 'MINUTES') // Timeout for the entire pipeline
        buildDiscarder(logRotator(numToKeepStr: '7')) // Discard old builds to save disk space
        disableConcurrentBuilds() // Ensures that only one build can run at a time
        timestamps() // Adds timestamps to the console output
        skipDefaultCheckout() // Skips the default checkout of source code, useful if you're doing a custom checkout
        retry(3) // Automatically retries the entire pipeline up to 3 times if it fails
    }
    environment {
        DOCKER_HUB_USERNAME="devopseasylearning"
        ALPHA_APPLICATION_01_REPO="alpha-application-01"
        ALPHA_APPLICATION_02_REPO="alpha-application-02"
        DOCKER_CREDENTIAL_ID = 's8-test-docker-hub-auth'
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 's8tia', description: '')
        string(name: 'APP1_TAG', defaultValue: 'latest', description: '')
        string(name: 'APP2_TAG', defaultValue: 'latest', description: '')
        string(name: 'PORT_ON_DOCKER_HOST', defaultValue: '', description: '')
    }
    stages {
        stage('Sanity Check') {
            steps {
                script {
                    sanity_check()
                }
            }
        }
        stage('Clone Repository') {
            steps {
                script {
                    git credentialsId: 'jenkins-ssh-agents-private-key',
                        url: 'git@github.com:DEL-ORG/s8-web-2.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
        stage('Building Application 01') {
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_HUB_USERNAME}/app-01:${BUILD_NUMBER} -f application-01.Dockerfile .
                        docker images
                    """
                }
            }
        }
            
        stage('Test timeout') {
            steps {
                script {
                    sleep 1
                }
            }
        }
    }
}

def customFunction() {
    sh """
        ls -l
        pwd
        uptime
    """
}


def sanity_check() {
    if (params.BRANCH_NAME.isEmpty()){
       echo "The parameter BRANCH_NAME is not set"
       sh 'exit 2'
   } 
}



pipeline {
    agent any
    stages {
        stage('Displaying Environment Variables') {
            steps {
                echo "The build number is: ${BUILD_NUMBER}"
                echo "The job name is: ${JOB_NAME}"
                echo "The Jenkins home directory is: ${JENKINS_HOME}"
                echo "The Jenkins URL is: ${JENKINS_URL}"
                echo "The build URL is: ${BUILD_URL}"
                echo "The job URL is: ${JOB_URL}"
                echo "The workspace is: ${WORKSPACE}" 
                echo "BUILD_DISPLAY_NAME: ${BUILD_DISPLAY_NAME}" 
                // echo "BUILD_TIMESTAMP: ${BUILD_TIMESTAMP}" 
                echo "JOB_DISPLAY_URL: ${JOB_DISPLAY_URL}" 
                echo "BUILD_URL_ANCHOR: ${BUILD_URL}/console"  
                echo "WORKSPACE: ${WORKSPACE}"  
            }
        }
    }
}

